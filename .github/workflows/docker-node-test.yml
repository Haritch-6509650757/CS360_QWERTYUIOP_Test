name: CI - Test and Deploy Docker Images

on:
  push:
    branches:
      - main 
      - develop
      - fix-from-feedback
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  test-source-code:
    name: Run Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node-version: [16.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get API yarn cache directory path
      id: api-yarn-cache-dir-path
      run: echo "dir=$(cd api && yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Cache API dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.api-yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-api-${{ hashFiles('api/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-api-

    - name: Get client yarn cache directory path
      id: client-yarn-cache-dir-path
      run: echo "dir=$(cd client && yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Cache client dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.client-yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-client-${{ hashFiles('client/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-client-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Rebuild sqlite3
      run: npm rebuild sqlite3 --force

    - name: Install global dependencies
      run: |
        npm install -g yarn
        yarn global add jest

    - name: Install and configure API
      working-directory: ./api
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
      run: |
        yarn install
        yarn seed
        echo "JWT_SECRET=${JWT_SECRET}" >> .env
        echo "ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}" >> .env

    - name: Install client dependencies  
      working-directory: ./client
      run: yarn install

    - name: Run API unit tests
      working-directory: ./api
      run: yarn test:unit
      
    - name: Run API integration tests
      working-directory: ./api
      run: yarn test:integration

    - name: Run client unit tests
      working-directory: ./client
      run: yarn test:unit

    - name: Run client integration tests
      working-directory: ./client
      run: yarn test:integration

  build-and-push-images:
    needs: test-source-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push API Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api:buildcache,mode=max
  
      - name: Build and Push Client Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client:buildcache,mode=max

  test-docker-images:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Docker network
        run: docker network create foodadvisor-network

      - name: Run API Tests
        run: |
          # Create container with proper setup
          docker run -d \
            --name test-api \
            --network foodadvisor-network \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api:latest \
            sh -c "mkdir -p /app/api/public/uploads && yarn && yarn seed && yarn test"

      - name: Run Client Tests
        run: |
          # Create container with proper setup and dependencies
          docker run -d \
            --name test-client \
            --network foodadvisor-network \
            -e NEXT_PUBLIC_API_URL=http://test-api:1337 \
            ${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client:latest \
            sh -c "yarn && yarn test"

      - name: Wait for tests to complete
        run: |
          # Wait for containers to finish and check exit codes
          docker wait test-api
          docker wait test-client
          
          # Check API container logs
          echo "API Test Logs:"
          docker logs test-api
          
          # Check Client container logs  
          echo "Client Test Logs:"
          docker logs test-client
          
          # Check exit codes
          API_EXIT=$(docker inspect test-api --format='{{.State.ExitCode}}')
          CLIENT_EXIT=$(docker inspect test-client --format='{{.State.ExitCode}}')
          
          if [ "$API_EXIT" != "0" ] || [ "$CLIENT_EXIT" != "0" ]; then
            echo "Tests failed"
            exit 1
          fi

      - name: Clean Up
        if: always()
        run: |
          docker rm -f test-api test-client || true
          docker network rm foodadvisor-network || true