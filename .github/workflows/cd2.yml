name: CD - Deploy to EC2 with Docker (Human trigger)

on:
  # push:
  #   branches:
  #     - main
 workflow_dispatch: 

jobs:
  check-image-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3    
        
      # Step 2: Check if Docker Image Exists
      - name: Check if Docker Image Exists API
        id: check_image_API
        run: |
          REPOSITORYAPI="${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api"
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORYAPI}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
          fi
          echo "Docker image exists. Proceeding to deployment."

      # Step 2: Check if Docker Image Exists
      - name: Check if Docker Image Exists foodadvisor-client
        id: check_image_client
        run: |
          REPOSITORYCLIENT="${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client"  
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORYCLIENT}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
          fi
          echo "Docker image exists. Proceeding to deployment."

      # Step 3: Set AWS Credentials in Environment Variables
      - name: Set AWS Credentials
        if: ${{ steps.check_image_backend.outcome == 'success' && steps.check_image_frontend.outcome == 'success'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: echo "AWS credentials set."

      # Step 4: Create EC2 Instance and Deploy the Application
      - name: Create EC2 Instance and Deploy the Application
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Define instance details
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-06b21ccaeff8cd686 \
            --instance-type t2.medium \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --user-data file://user-data.sh \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Instance ID: $INSTANCE_ID"

          # Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Output the instance public DNS
          INSTANCE_PUBLIC_DNS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          echo "Instance Public DNS: $INSTANCE_PUBLIC_DNS"
          echo "INSTANCE_PUBLIC_DNS=$INSTANCE_PUBLIC_DNS" >> $GITHUB_ENV


          INSTANCE_PUBLIC_IPV4=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "Instance Public IPv4: $INSTANCE_PUBLIC_IPV4"
          echo "INSTANCE_PUBLIC_IPV4=$INSTANCE_PUBLIC_IPV4" >> $GITHUB_ENV
          sleep 5

      # Step 5: Deploying the Web Application to EC2
      - name: Connect server and pull image Frontend/Backend
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          #REPOSITORYAPI: "${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api"
          #REPOSITORYCLIENT: "${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client"
        run: |
          REPOSITORYAPI="${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api:latest"
          REPOSITORYCLIENT="${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client:latest"
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USER }}@${{ env.INSTANCE_PUBLIC_DNS }} << 'EOF'
          set -e 
          sudo yum install -y docker
          sudo service docker start
      
          echo "Deploying API"
          echo "API Repository: ${REPOSITORYAPI}"
          sudo docker pull $REPOSITORYAPI
          sudo docker run -d --name foodadvisor-api \
            -p 1337:1337 \
            -e HOST=0.0.0.0 \
            -e PORT=1337 \
            -e STRAPI_ADMIN_CLIENT_URL=http://${INSTANCE_PUBLIC_IPV4}:3000 \
            -e STRAPI_ADMIN_CLIENT_PREVIEW_SECRET=${ADMIN_JWT_SECRET} \
            $REPOSITORYAPI:latest
      
          echo "Deploying CLIENT"
          echo "Client Repository: $REPOSITORYCLIENT"
          sudo docker pull $REPOSITORYCLIENT
          sudo docker run -d --name foodadvisor-client \
            -p 3000:3000 \
            -e NEXT_PUBLIC_API_URL=http://${INSTANCE_PUBLIC_IPV4}:1337 \
            -e PREVIEW_SECRET=${ADMIN_JWT_SECRET} \
            ${REPOSITORYCLIENT}:latest
      
          echo API http://${INSTANCE_PUBLIC_IPV4}:1337/
          echo CLIENT http://${INSTANCE_PUBLIC_IPV4}:3000/
          EOF
